field f: Int
method test1(b: Bool, x: Ref, y: Ref)
    requires acc(x.f)
{
    //:: ExpectedOutput(assert.failed:insufficient.permission)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert b ? acc(y.f)  : x.f > 12
}

method test2(x: Ref, b: Bool)
requires acc(x.f, 1/2)
{
    inhale b ==> acc(x.f, 1/2)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert perm(x.f) == 1/1
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert !b
}
field left: Int
field right: Int
predicate tuple(this: Ref){
    acc(this.left) && acc(this.right)
}

method test3(this: Ref, b: Bool)
{
    inhale b ==> tuple(this)
    //:: ExpectedOutput(unfold.failed:insufficient.permission)
    unfold tuple(this)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert !b
}
method test4(this: Ref, b: Bool)
requires tuple(this)
{
    exhale b ==> tuple(this)
    //:: ExpectedOutput(unfold.failed:insufficient.permission)
    unfold tuple(this)
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert b
}
